"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const users_controller_1 = require("../controllers/users.controller");
const auth_middleware_1 = require("../middleware/auth.middleware");
const rateLimit_middleware_1 = require("../middleware/rateLimit.middleware");
const validation_middleware_1 = require("../middleware/validation.middleware");
const sanitization_middleware_1 = require("../middleware/sanitization.middleware");
const audit_middleware_1 = require("../middleware/audit.middleware");
const validation_1 = require("../utils/validation");
const router = (0, express_1.Router)();
router.post('/create', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), rateLimit_middleware_1.registerRateLimit, (0, audit_middleware_1.auditAuth)('USER_CREATION'), sanitization_middleware_1.sanitizationMiddleware, (0, validation_middleware_1.validate)({ body: validation_1.createUserSchema }), users_controller_1.createUser, audit_middleware_1.completeAudit);
router.get('/search', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), users_controller_1.searchUsers);
router.get('/:userId', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), users_controller_1.getUserById);
router.get('/:userId/profile', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), users_controller_1.getProfile);
router.put('/:userId/profile', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), (0, audit_middleware_1.auditAuth)('PROFILE_UPDATE'), sanitization_middleware_1.sanitizationMiddleware, (0, validation_middleware_1.validate)({ body: validation_1.updateProfileSchema }), users_controller_1.updateProfile, audit_middleware_1.completeAudit);
router.put('/:userId/status', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), (0, audit_middleware_1.auditAuth)('USER_STATUS_UPDATE'), sanitization_middleware_1.sanitizationMiddleware, users_controller_1.updateUserStatus, audit_middleware_1.completeAudit);
router.delete('/:userId/account', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), (0, audit_middleware_1.auditAuth)('ACCOUNT_DELETION'), users_controller_1.deleteAccount, audit_middleware_1.completeAudit);
router.get('/:userId/branches', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), users_controller_1.getUserBranches);
router.post('/:userId/branches/join', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), rateLimit_middleware_1.generalRateLimit, sanitization_middleware_1.sanitizationMiddleware, users_controller_1.joinBranch);
router.delete('/:userId/branches/:branchId', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), users_controller_1.leaveBranch);
router.get('/:userId/body-metrics', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), users_controller_1.getBodyMetrics);
router.put('/:userId/body-metrics', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), (0, audit_middleware_1.auditAuth)('BODY_METRICS_UPDATE'), sanitization_middleware_1.sanitizationMiddleware, (0, validation_middleware_1.validate)({ body: validation_1.bodyMetricsSchema }), users_controller_1.updateBodyMetrics, audit_middleware_1.completeAudit);
router.get('/:userId/body-metrics/history', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), (0, validation_middleware_1.validate)({ query: validation_1.bodyMetricsHistorySchema }), users_controller_1.getBodyMetricsHistory);
router.get('/:userId/privacy', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), users_controller_1.getPrivacySettings);
router.put('/:userId/privacy', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), (0, audit_middleware_1.auditAuth)('PRIVACY_SETTINGS_UPDATE'), sanitization_middleware_1.sanitizationMiddleware, (0, validation_middleware_1.validate)({ body: validation_1.privacySettingsSchema }), users_controller_1.updatePrivacySettings, audit_middleware_1.completeAudit);
router.get('/:userId/health-data/export', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireRole)(['admin']), (0, audit_middleware_1.auditAuth)('HEALTH_DATA_EXPORT'), users_controller_1.exportHealthData, audit_middleware_1.completeAudit);
router.get('/:userId/preferences', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), users_controller_1.getUserPreferences);
router.put('/:userId/preferences', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), (0, audit_middleware_1.auditAuth)('USER_PREFERENCES_UPDATE'), sanitization_middleware_1.sanitizationMiddleware, (0, validation_middleware_1.validate)({ body: validation_1.userPreferencesSchema }), users_controller_1.updateUserPreferences, audit_middleware_1.completeAudit);
router.post('/:userId/devices', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), rateLimit_middleware_1.generalRateLimit, (0, audit_middleware_1.auditAuth)('DEVICE_TOKEN_REGISTER'), sanitization_middleware_1.sanitizationMiddleware, (0, validation_middleware_1.validate)({ body: validation_1.deviceTokenSchema }), users_controller_1.registerDeviceToken, audit_middleware_1.completeAudit);
router.delete('/:userId/devices/:tokenId', auth_middleware_1.authenticateToken, (0, auth_middleware_1.requireUserOrAdmin)(), (0, audit_middleware_1.auditAuth)('DEVICE_TOKEN_REMOVE'), users_controller_1.removeDeviceToken, audit_middleware_1.completeAudit);
exports.default = router;
//# sourceMappingURL=users.routes.js.map